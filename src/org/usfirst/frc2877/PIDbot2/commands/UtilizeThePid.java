// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc2877.PIDbot2.commands;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc2877.PIDbot2.DummyPIDOutput;
import org.usfirst.frc2877.PIDbot2.Robot;
import org.usfirst.frc2877.PIDbot2.RobotMap;
/**
 *
 */
public class UtilizeThePid extends Command {
    
    DummyPIDOutput theOutput = RobotMap.PIDOut;
    PIDController PIDControl = RobotMap.pIDController1;
    double prevHeading;

    public UtilizeThePid() {
        // Use requires() here to declare subsystem dependencies
         //requires(RobotMap.driveDriveTrain);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    // Called just before this Command runs the first time
    protected void initialize() {
        prevHeading = theOutput.output;
        PIDControl.setSetpoint(prevHeading+90);
    }
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        double output = theOutput.output;
        Robot.drive.drive(0, output);
        
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return PIDControl.onTarget();
    }
    // Called once after isFinished returns true
    protected void end() {
        Robot.drive.drive(0, 0);
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
        end();
    }
}
