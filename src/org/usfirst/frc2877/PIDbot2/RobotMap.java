// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc2877.PIDbot2;
import org.usfirst.frc2877.PIDbot2.DummyPIDOutput;
    
import edu.wpi.first.wpilibj.*;

import edu.wpi.first.wpilibj.can.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import java.util.Vector;
/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static CANJaguar driveCANJag3;
    public static CANJaguar driveCANJag1;
    public static CANJaguar driveCANJag2;
    public static CANJaguar driveCANJag4;
    public static RobotDrive driveDriveTrain;
    public static Gyro gyroSubstGyro1;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static PIDController pIDController1;
    public static DummyPIDOutput PIDOut;
    
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        try { 
            driveCANJag3 = new CANJaguar(4);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
	
        
        try { 
            driveCANJag1 = new CANJaguar(2);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
	
        
        try { 
            driveCANJag2 = new CANJaguar(3);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
	
        
        try { 
            driveCANJag4 = new CANJaguar(5);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
	
        
        driveDriveTrain = new RobotDrive(driveCANJag1, driveCANJag2,
              driveCANJag3, driveCANJag4);
	
        driveDriveTrain.setSafetyEnabled(true);
        driveDriveTrain.setExpiration(0.1);
        driveDriveTrain.setSensitivity(0.5);
        driveDriveTrain.setMaxOutput(1.0);
        gyroSubstGyro1 = new Gyro(1, 1);
	LiveWindow.addSensor("GyroSubst", "Gyro 1", gyroSubstGyro1);
        gyroSubstGyro1.setSensitivity(0.007);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        //driveDriveTrain.arcadeDrive(moveValue, rotateValue);
        
        PIDOut = new DummyPIDOutput();
        
        pIDController1 = new PIDController(1, .3, .01, gyroSubstGyro1, PIDOut);
        pIDController1.setSetpoint(0);
        pIDController1.setAbsoluteTolerance(.03);
    }
}
